CVE: CVE-2013-1763
CWE:
  - 20
ipc: The feature that this vulnerability affected is related to providing the
  user with information about network sockets.
CVSS: CVSS:7.2/AV:L/AC:L/Au:N/C:C/I:C/A:C
bugs: []
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: |
    The feature impacted by this vulnerability was not related to
    internationalization. The feature involves users requesting information about network sockets.
vccs:
  - commit: 8ef874bfc7296fa206eea2ad1e8a426f576bf6f6
    note: Discovered automatically by archeogit.
fixes:
  - commit: 6e601a53566d84e1ffd25e7b6fe0b6894ffd79c0
    note: Manually confirmed.
vouch:
  note:
  answer:
  question: >
    Was there any part of the fix that involved one person vouching for

    another's work?


    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.

    Write a note about how you came to the conclusions you did, regardless of what your answer was.
bounty:
  amt:
  url:
  announced:
lessons:
  yagni:
    note:
    applies: false
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  serial_killer:
    note:
    applies: false
  complex_inputs:
    note:
    applies: false
  distrust_input:
    note: The vulnerability was caused by improperly validating user input.
    applies: true
  least_privilege:
    note:
    applies: false
  native_wrappers:
    note:
    applies: false
  defense_in_depth:
    note:
    applies: false
  secure_by_default:
    note:
    applies: false
  environment_variables:
    note:
    applies: false
  security_by_obscurity:
    note:
    applies: false
  frameworks_are_optional:
    note:
    applies: false
reviews: []
sandbox:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides?

    A sandboxing feature is one that allows files, users, or other features
    limited access. Vulnerabilities that violate sandboxes are usually based on
    access control, checking privileges incorrectly, path traversal, and the
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: |
    The feature that this vulnerability affected is related 
    to networking, not sandboxing.
upvotes: 0
CWE_note: |
  CWE as registered in the NVD. If you are curating, check that this
  is correct and replace this comment with "Manually confirmed".
mistakes: There was a slip in input validation since the developers failed to
  check whether the user input was within the bounds of the array. Good unit
  testing likely would have caught this issue, assuming that the developers
  tested the function with a variety of inputs.
nickname: Batman vs. Superman
subsystem:
  question: |
    What subsystems was the mistake in? These are WITHIN linux kernel

    Determining the subsystem is a subjective task. This is to help us group
     similar vulnerabilities, so choose a subsystem that other vulnerabilities would be in. Y

    Some areas to look for pertinent information:
      - Bug labels
      - Directory names
      - How developers refer to an area of the system in comments,
        commit messages, etc.

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    Example linux kernel subsystems are:
      * drivers
      * crypto
      * fs
      * net
      * lib

    Name should be:
      * all lowercase English letters
      * NOT a specific file
      * can have digits, and _-@/

    Can be multiple subsystems involved, in which case you can make it an array
    e.g.
        name: ["subsystemA", "subsystemB"] # ok
        name: subsystemA # also ok
  name: net
  note: null
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  answer: |
    There is no evidence as to how this vulnerability was found. I looked at the change log, commit message 
    and comments, all links on the NVD page, and the thread 
    from openwall.com (https://www.openwall.com/lists/oss-security/2013/02/24/2). The vulnerability was 
    discovered by a Google employee (Mathias Krause <minipli@googlemail.com>) on 2013-02-23.
  automated: null
  contest: false
  developer: true
discussion:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  answer: |
    There is no evidence as to how this vulnerability was found. I looked at the change log, commit message 
    and comments, all links on the NVD page, and the thread 
    from openwall.com (https://www.openwall.com/lists/oss-security/2013/02/24/2). The vulnerability was 
    discovered by a Google employee (Mathias Krause <minipli@googlemail.com>) on 2013-02-23.
  automated: null
  contest: false
  developer: true
stacktrace:
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces: false
  stacktrace_with_fix: false
  note: No mentions of stacktraces
description: Users were able to send a Netlink message requesting information
  about sockets in a specific family. If the user specified a family that was
  greater than the size of an array in the code, they could escalate their
  privileges by exploiting out-of-bound access. Netlink is a Linux subsystem
  that allows for information to be transferred between the kernel and user
  processes.
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: false
  code_answer: |
    There were no automated tests found in the surrounding directory and the
    commit message and comments do not indicate that there were any tests involved.
  fix: false
  fix_answer: The fix involved adding a conditional to the function.
reported_date:
specification:
  note:
  answer:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
announced_date: 2013-02-28
curation_level: 2
published_date: 2013-02-28
forgotten_check:
  answer: true
  note: |
    The developers forgot to validate input to ensure that it was within the
    bounds of the related array.
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note: |
    The vulnerability could be discovered automatically because it is an
    out-of-bounds issue involving user input. If an automated program tried sending 
    a request with increasingly large values, eventually it would encounter the error.
  answer: true
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Use this to specify any commits you think are notable in some way, and
    explain why in the note.

    Example interesting commits:
      * Mentioned as a problematic commit in the past
        e.g. "This fixes regression in commit xys"
      * A significant rewrite in the git history
      * Other commits that fixed a similar issue as this vulnerability
      * Anything else you find interesting.
  commits: []
order_of_operations:
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: Fix involved adding a conditional to the function.
CWE Identifier: '20'
announced: 2013-02-28
discovered_answer: There is no evidence as to how this vulnerability was found.
  I looked at the change log, commit message and comments, all links on the NVD
  page, and the thread from openwall.com
  (https://www.openwall.com/lists/oss-security/2013/02/24/2). The vulnerability
  was discovered by a Google employee (Mathias Krause <minipli@googlemail.com>)
  on 2013-02-23.
discovered_automated:
  -
  - '1'
discovered_developer:
  -
  - '1'
discovered_contest:
  -
  - '1'
major_events: []
related: '20'
bugs_repeater: []
sandbox_answer:
  -
  - '1'
sandbox_note: The feature that this vulnerability affected is related to
  networking, not sandboxing.
ipc_answer:
  -
  - '1'
ipc_note: The feature that this vulnerability affected is related to providing
  the user with information about network sockets.
